"""
Module for handling ASPECT parameter files
"""
import xmltodict
import requests


def combine_dicts(dict_1: dict, dict_2: dict) -> None:
    """
    Recursive function that takes two dictionaries (a) and (b), and combines them in (b).

    Keys and values that are in (a) but not found in (b), are added to (b).

    This is an in-place function, use with caution as input b is overwritten.

    Parameters:
        dict_1   : dict
            The first python dictionary.
        dict_2   : dict
            The second Python dictionary, which will be completed by key and values from (a).

    Returns:
         None
     """
    for k, v in dict_1.items():
        if isinstance(v, dict):
            combine_dicts(v, dict_2.setdefault(k, {}))
        else:
            dict_2[k] = v


def rekey(input_dict: dict, output_dict=None) -> None:
    """
    Recursive function to update parameter names imported from parameters.xml

    The function update the dictionary keys/parameter names by replacing '_20' with ' ' and '_2d' with '-'

    Parameters:
        input_dict  : dict
            the parameter dictionary imported from parameters.xml
        output_dict : dict
            an empty dictionary to store the updated one

    Returns:
        None
    """
    if output_dict is None:
        output_dict = {}

    for k, v in input_dict.items():
        if isinstance(v, dict):
            kk = k.replace('_20', ' ')
            kk = kk.replace('_2d', '-')
            output_dict.update({kk: {}})
            rekey(v, output_dict[kk])
        else:
            output_dict.update({k: v})


def import_prm_library(prm_library=None) -> None:
    """
    Function to import the default parameter library, as a dictionary, from the parameters.xml at
    'https://aspect.geodynamics.org/doc/parameter_view/parameters.xml'

    Parameters:
        prm_library : dict
            Name of the dictionary that will be used to parse the parameters xml file.

    Returns:
        prm_library: dict
    """

    if prm_library is None:
        prm_library = {}

    tmp_prm_library = {'Global parameters': {}}

    prm_xml = requests.get('https://aspect.geodynamics.org/doc/parameter_view/parameters.xml')
    tmp_dict = xmltodict.parse(prm_xml.text)['ParameterHandler']

    for k, v in tmp_dict.items():
        if isinstance(v, dict) and 'documentation' in v.keys():
            tmp_prm_library['Global parameters'].update({k: v})
        else:
            tmp_prm_library.update({k: v})

    rekey(tmp_prm_library, prm_library)


def prmf_to_prmlist(file: str) -> list[str]:
    """
    Function to open an ASPECT parameter file, clean it (remove comment and blank lines),
    and returns a list of the parameter lines.

    Parameters:
        file: str
            file name with full path

    Returns:
        lines_list: list[str]
            a list of lines from the parameter file

    """
    with open(file, "r") as prm_file:
        lines_list = []
        for line in prm_file:
            if "#" in line:
                line = line[:line.index("#")]
                if line.strip():
                    lines_list.append(line.strip())
            elif line.strip():
                lines_list.append(line.strip())

    return lines_list


def prmlist_to_prmdict(lines_list: list[str]) -> dict:
    """
    Function to convert a list of parameter lines (e.g., generated by <prmf_to_list>)
    to a nested dictionary of parameters.

    The function calls function <combine_dicts>

    Parameters:
        lines_list: list[str]
            A list of strings of parameter lines (e.g., generated by <prmf_to_prmlist>)

    Returns:
        prm_dict: dict
            A nested dictionary of ASPECT parameters and their values

    """
    i = 0
    section_keys = []
    prm_dict = {'Global parameters': {}}

    for line in lines_list:

        if line.split()[0] == 'subsection':
            i += 1
            section_keys.append(' '.join(line.split()[1:]))

        elif line.split()[0] == 'end':
            i -= 1
            section_keys.pop()

        elif line.split()[0] == 'set':

            set_dict = {}
            prm_name = line[3:line.find('=')].strip()
#            prm_name = '_'.join(prm_name.split())
            prm_value = line[line.find('=') + 1:].strip()

            set_dict[prm_name] = {'value': prm_value}

            if i == 0:

                prm_dict['Global parameters'].update(set_dict)
                set_dict.clear()

            elif i > 0:

                sct_dict = {prm_name: {'value': prm_value}}

                for key in reversed(section_keys):
                    sct_dict = dict({key: sct_dict})

                combine_dicts(sct_dict, prm_dict)

    return prm_dict


def check_prmdict_diff(dict_1: dict, dict_2: dict, path='') -> None:
    """
    Recursive function that compares dictionary dict_1 against dictionary dict_2,
    and prints on the screen the keys that exists only in dict_1 and the values
    that are different in the two dictionaries.

    Parameters:
        dict_1: dict
            Input dictionary 1
        dict_2: dict
            Input dictionary 2
        path: str
            Sets an empty string needed for recursion.

    returns:
        None
            The differences are printed on the screen

    """

    for key in dict_1:
        if key in dict_2:
            if isinstance(dict_1[key], dict):
                nested_path = '%s| %s' % (path, key if path else key)
                check_prmdict_diff(dict_1[key], dict_2[key], nested_path)
            elif dict_1[key] != dict_2[key]:
                difference = ['<%s>' % path, '    %s = %s (input 1)' % (key, dict_1[key]),
                              '    %s = %s (input 2)' % (key, dict_2[key])]
                print("\n".join(difference), '\n')
        else:
            print("<%s%s> found in input 1 but not in input 2\n"
                  % ("%s| " % path if path else '', key))


def load_prmf(file: str) -> dict:
    """
    Function to load a parameter file and return a nested dictionary of all parameters and their values.

    Parameters:
        file: str
            Input parameter file name and path.

    Returns:
        prmdict: dict
            A nested dictionary of all parameters and their values extracted from the input file.
    """

    lines_list = prmf_to_prmlist(file)

    prmdict = prmlist_to_prmdict(lines_list)

    return prmdict


def check_prmf_diff(prmf_1: str, prmf_2: str) -> None:
    """
    Function to check and print on the screen the differences between two prm files.
    Function calls functions <load_prmf> and <check_prmdict_diff>

    Parameters:
        prmf_1: str
            Input parameter file 1
        prmf_2: str
            Input parameter file 2

    Returns:
        None
            The differences are printed on the screen

    """
    dict_1 = load_prmf(prmf_1)
    dict_2 = load_prmf(prmf_2)

    check_prmdict_diff(dict_1, dict_2)


def sprint_prmdict(d: dict, indent='  ', i_indent=0) -> None:
    """
    Recursive function to print ASPECT parameters from a parameter dictionary on the screen.

    Parameters:
        d: dict
            Input parameter dictionary.
        indent: str
            Indention used for formatting.
        i_indent: int
            initial indentation = 0 by default.

    Returns:
        None
            The result is printed on the screen.
    """

    for key, value in d.items():
        if key == 'Global parameters':
            for gp, gp_value in value.items():
                print('set %s = %s' % (gp, gp_value['value']))
        elif value.get('value') is None:
            print('%ssubsection %s' % (indent * i_indent, key))
            i_indent += 1
            sprint_prmdict(value, indent=indent, i_indent=i_indent)
            print(indent * (i_indent - 1) + 'end')
            i_indent -= 1
        elif value.get('value') is not None:
            print('%sset %s = %s' % (indent * i_indent, key, value.get('value')))


def format_prmdict(d: dict, prm_lines=None, indent='  ', i_indent=0) -> None:
    """
    Recursive Function that takes a parameter dictionary and returns
    a list of lines with the proper formatting/indentation.

    The input argument <prm_lines: list[str]> is modified in-place.

    Parameters:
        d: dict
            Input parameter dictionary.
        indent: str
            Indention used for formatting.
        i_indent: int
            Initial indentation = 0 by default.
        prm_lines: list[str]
            An empty list to be populated in-place with formatted lines.

    Returns:
        None
            The argument prm_lines list is modified in-place.
    """

    if prm_lines is None:
        prm_lines = []

    for key, value in d.items():
        if key == 'Global parameters':
            for gp, gp_value in value.items():
                prm_lines.append('set %s = %s' % (gp, gp_value['value']))
        elif value.get('value') is None:
            prm_lines.append('%ssubsection %s' % (indent * i_indent, key))
            i_indent += 1
            format_prmdict(value, indent=indent, i_indent=i_indent, prm_lines=prm_lines)
            prm_lines.append(indent * (i_indent - 1) + 'end')
            i_indent -= 1
        elif value.get('value') is not None:
            prm_lines.append('%sset %s = %s' % (indent * i_indent, key, value.get('value')))


def write_prmdict(d: dict, prmf: str, prm_lines=None, indent='  ', i_indent=0) -> None:
    """
        Recursive Function that takes a parameter dictionary and write it into a formatted parameter text file.

        Parameters:
            d: dict
                Input parameter dictionary.
            prmf: str
                Name and path of the output parameter file.
            indent: str
                Indention used for formatting.
            i_indent: int
                initial indentation = 0 by default.
            prm_lines: list[str]
                Sets an empty list needed for recursion.

        Returns:
            None
    """

    if prm_lines is None:
        prm_lines = []

    for key, value in d.items():
        if key == 'Global parameters':
            for gp, gp_value in value.items():
                prm_lines.append('set %s = %s' % (gp, gp_value['value']))
        elif value.get('value') is None:
            prm_lines.append('%ssubsection %s' % (indent * i_indent, key))
            i_indent += 1
            format_prmdict(value, indent=indent, i_indent=i_indent, prm_lines=prm_lines)
            prm_lines.append(indent * (i_indent - 1) + 'end')
            i_indent -= 1
        elif value.get('value') is not None:
            prm_lines.append('%sset %s = %s' % (indent * i_indent, key, value.get('value')))

    with open(prmf, 'w') as f:
        for line in prm_lines:
            f.write(line)
            f.write('\n')


def prmname_check(prm_dict: dict, prm_library=None) -> None:
    """
    Function to check if all parameter names in a parameter dictionary are recognized.

    Unrecognized parameters are printed on the screen.

    Parameters:
        prm_dict    :   dict
            Input dictionary
        prm_library :   dict
            Dictionary containing the parameter library. If none provided, parameter library
            is imported using the <import_prm_library> function.
    Returns:
        None
    """

    if prm_library is None:
        prm_library = dict({})
        import_prm_library(prm_library)

    def lst_recu(prm_dict, prm_library, tmp_list=None) -> list:
        """
        Function to create a list of unrecognized parameters

        Parameters:
            prm_dict    :   dict
                input dictionary
            prm_library :   dict
                containing the parameter library.
            tmp_list    : list
                used internally
        Returns:
            tmp_list    :   list
                of unrecognized parameters
        """

        if tmp_list is None:
            tmp_list = []

        if isinstance(prm_dict, dict):
            for k in prm_dict.keys():
                if k not in prm_library.keys():
                    tmp_list.append(k)
#                    print(k)
                else:
                    lst_recu(prm_dict[k], prm_library[k], tmp_list)

        return tmp_list

    tmp_list = lst_recu(prm_dict, prm_library)

    if len(tmp_list) > 0:
        for i in range(len(tmp_list)):
            print('Unrecognized parameters: \n\t-> %s' % tmp_list[i])
    else:
        print('----------------\n'
              '----ALL GOOD----\n'
              '----------------\n'
              '  ___           \n'
              ' ( ((           \n'
              '  \\ =\\          \n'
              ' __\\_ `-\\       \n'
              '(____))(  \\-----\n'
              '(____)) _      \n'
              '(____))         \n'
              '(____))____/----')
